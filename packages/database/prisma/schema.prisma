generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  useMultipleFiles                 = true
  createInputTypes                 = false
  addInputTypeValidation           = false
  addIncludeType                   = false
  createOptionalDefaultValuesTypes = true
  createPartialTypes               = true
}

generator docs {
  provider = "node ../../node_modules/prisma-docs-generator"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// ************************************************************************
// DONT TOUCH THIS SECTION
// REASON: WE ARE REUSING THE HRWEB DATABASE AMONG SEVERAL PROJECTS
model DemoEmployee {
  id                                     Int     @id @default(autoincrement())
  first_name                             String?
  last_name                              String?
  base_office_location                   String?
  middle_name                            String?
  salutation                             String?
  gender                                 String?
  group_date_of_joining                  String?
  date_of_birth                          String?
  date_of_birth_access                   String?
  candidate_id                           String?
  date_of_resignation                    String?
  date_of_confirmation                   String?
  date_of_exit                           String?
  date_of_reactivation                   String?
  date_of_activation                     String?
  date_of_joining                        String?
  created_by                             String?
  department                             String?
  department_code                        String?
  department_name                        String?
  departments_hierarchy                  String?
  departments_hierarchy_with_codes       String?
  designation                            String?
  designation_code                       String?
  designation_effective_from             String?
  designation_name                       String?
  direct_manager_position_id             String?
  direct_manager                         String?
  direct_manager_effective_from          String?
  direct_manager_employee_id             String?
  direct_manager_email                   String?
  direct_manager_name                    String?
  do_not_hire                            String?
  do_not_hire_comment                    String?
  employee_added_date                    String?
  employee_currency                      String?
  employee_id                            String  @unique
  employee_separation_comments           String?
  employee_separation_reason             String?
  employee_status                        String?
  sub_employee_type                      String?
  employee_type                          String?
  employee_type_effective_from           String?
  grade                                  String?
  hod                                    String?
  group_hr_head                          String?
  hod_employee_id                        String?
  hrbp_employee_id                       String?
  hrbp_name                              String?
  imported_date_of_confirmation          String?
  is_on_notice_period                    String?
  notice_period_assigned                 String?
  mobile_access                          String?
  old_employee_id_rehired                String? @map("old_employee_id_(rehired)")
  performance_designation_and_department String? @map("performance_designation_&_department")
  performance_manager                    String?
  permission_role                        String?
  position_id                            String?
  probation_period                       String?
  reactivated_by                         String?
  reactivated_reason                     String?
  rehire_by                              String?
  rehire_on                              String?
  rehire_reason                          String?
  separation_transaction_date            String?
  separation_requested_last_date         String?
  separation_agreed_last_date            String?
  tenure                                 String?
  termination_comment                    String?
  total_ctc                              String?
  time_zone                              String?
  total_ctc_in_base_currency             String? @map("total_ctc_(in_base_currency)")
  total_work_experience_from_gdoj        String?
  total_experience                       String?
  variable_pay                           String?
  variable_pay_in_base_currency          String? @map("variable_pay_(in_base_currency)")
  variable_pay_with_name                 String?
  blood_group                            String?
  citizenship_status                     String?
  city_type                              String?
  center_type                            String?
  anniversary_date                       String?
  introduction_or_bio                    String? @map("introduction/bio")
  full_name                              String?
  ethnicity                              String?
  marital_status                         String?
  location_type                          String?
  location_area                          String?
  marriage_anniversary_access            String?
  military_status                        String?
  nationality                            String?
  office_address                         String?
  office_area                            String?
  office_city                            String?
  office_country                         String?
  office_location                        String?
  office_location_cost_center            String?
  office_location_cost_center_id         String?
  work_area_code                         String?
  user_unique_id                         String?
  position_lwd                           String?
  self_service                           String?
  religion                               String?
  personal_cpr_number_bahrain            String? @map("personal_(cpr)_number_(bahrain)")
  phone_country_code                     String?
  primary_mobile_number                  String?
  office_state                           String?
  office_region                          String?
  current_address                        String?
  current_address_line_1                 String?
  current_pin_code                       String?
  current_city                           String?
  current_country                        String?
  current_landmark                       String?
  current_state                          String?
  current_street                         String?
  emergency_address                      String?
  emergency_address_line_1               String?
  emergency_city                         String?
  emergency_country                      String?
  emergency_landmark                     String?
  emergency_pin_code                     String?
  emergency_state                        String?
  emergency_street                       String?
  extension_mobile_no                    String?
  office_mobile_access                   String?
  personal                               String?
  permanent_address                      String?
  permanent_address_line_1               String?
  permanent_pin_code                     String?
  permanent_city                         String?
  permanent_country                      String?
  permanent_landmark                     String?
  permanent_state                        String?
  permanent_street                       String?
  personal_email_id                      String?
  personal_email_id_access               String?
  personal_mobile_access                 String?
  personal_mobile_no                     String?
  office_mobile_no                       String?
  aadhaar_number                         String?
  emirates_id                            String?
  iqama_number                           String?
  is_emirates_card_uploaded              String?
  international_bank_account_number_iban String? @map("international_bank_account_number_(iban)")
  is_iqama_number_uploaded               String? @map("is_iqama_number_uploaded?")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String @unique

  patients DemoPatient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DemoPatient {
  id            Int      @id @default(autoincrement())
  firstName     String
  middleName    String?
  lastName      String
  dateOfBirth   DateTime
  contactNumber String
  address       String
  city          String
  state         String
  country       String
  remarks       String?
  genderId      Int
  gender        Gender   @relation(fields: [genderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Data {
  id                        Int      @id @default(autoincrement())
  callDate                  DateTime
  callType                  String
  source                    String
  destination               String
  duration                  Int
  talktime                  Int
  disposition               String
  audio                     String
  batchTranscriptionBaseUrl String?
}

// ************************************************************************

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserStatus {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id         Int         @id @default(autoincrement())
  username   String      @unique
  password   String
  name       String
  mobile     String?
  email      String?
  otp        String?
  expiryTime DateTime?
  twoFactor  Boolean     @default(false)
  roleId     Int
  role       Role        @relation(fields: [roleId], references: [id])
  statusId   Int?
  status     UserStatus? @relation(fields: [statusId], references: [id])

  usersCreated User[] @relation("UserCreatedByUser")
  usersUpdated User[] @relation("UserUpdatedByUser")

  // Audit Fields
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  updatedById Int?

  createdBy        User?   @relation("UserCreatedByUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  updatedBy        User?   @relation("UserUpdatedByUser", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ocrUserDetails   Ocr[]   @relation("ocrUserDetails")
  ocrCreated       Ocr[]   @relation("ocrCreatedByUser")
  ocrUpdated       Ocr[]   @relation("ocrUpdatedByUser")
  ocrIdUserDetails qrOcr[] @relation("ocrIdUserDetails")

  @@unique([username, mobile])
  @@unique([username, email])
}

model Ocr {
  id            Int    @id @default(autoincrement())
  userId        Int
  type          String
  extractedData String @db.Text
  uploadedData  String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById Int?
  updatedById Int?
  qrId        String?
  createdBy   User?    @relation("ocrCreatedByUser", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  updatedBy User? @relation("ocrUpdatedByUser", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  user User @relation("ocrUserDetails", fields: [userId], references: [id], onUpdate: NoAction)
}

model qrOcr {
  id         Int      @id @default(autoincrement())
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  qrId       String   @unique
  isUploaded Boolean
  expiryAt   DateTime

  user User @relation("ocrIdUserDetails", fields: [userId], references: [id], onUpdate: NoAction)
}
